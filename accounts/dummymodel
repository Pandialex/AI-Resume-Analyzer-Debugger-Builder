# from django.db import models
# from django.contrib.auth.models import AbstractUser
# from django.utils import timezone


# # ✅ Custom User model
# class User(AbstractUser):
#     email = models.EmailField(unique=True)  # enforce unique email
#     credits = models.IntegerField(default=0)  # starting free credits
#     USERNAME_FIELD = "username"
#     REQUIRED_FIELDS = ["email"]

#     def __str__(self):
#         return self.username


# # ✅ Profile (extra details for user)
# class Profile(models.Model):
#     user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
#     profile_pic = models.ImageField(upload_to="profile_pics/", blank=True, null=True)
#     bio = models.TextField(blank=True, null=True)
#     updated_at = models.DateTimeField(auto_now=True)

#     def __str__(self):
#         return f"Profile of {self.user.username}"


# # ✅ OTP (for verification & password reset)
# class OTP(models.Model):
#     user = models.ForeignKey(User, on_delete=models.CASCADE)
#     code = models.CharField(max_length=6)  # 6-digit OTP
#     purpose = models.CharField(
#         max_length=20,
#         choices=[("register", "Register"), ("reset", "Password Reset")],
#     )
#     created_at = models.DateTimeField(auto_now_add=True)

#     def is_valid(self):
#         return (timezone.now() - self.created_at).seconds < 300  # 5 minutes validity

#     def __str__(self):
#         return f"OTP for {self.user.username} ({self.purpose})"


# # ✅ UsageTracker (for credits/tokens tracking)
# class UsageTracker(models.Model):
#     user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="usage_tracker")
#     tokens_used = models.IntegerField(default=0)   # ✅ default added
#     last_used = models.DateTimeField(auto_now=True)

#     def __str__(self):
#         return f"{self.user.username} - {self.tokens_used} tokens used"
